Создайте простейшую иерархию классов, моделирующую информацию о группе студентов:

	•	класс Student (студент):
		o	Номер зачетной книжки.
		o	ФИО.
		o	Дата рождения (рекомендуется использовать готовый класс из лекций).
		o	Форма обучения: бюджет или контракт (через enum).

	•	класс AcademicGroup (группа):
		o	Название группы.
		o	Список студентов группы.
		o	Староста группы (сaptain).

Обработайте простейшие виды ошибок, которые могут возникать в модели, при помощи генерации исключительных ситуаций:
	•	строковые параметры (имена, названия) не могут быть пустыми;
	•	дата рождения студента не должна быть более поздней, чем текущая дата;
	•	в модели не должно существовать двух студентов с одинаковым номером зачетной книжки;
	•	в модели не должно существовать двух групп с одинаковыми названиями;
	•	староста группы должен учиться в этой группе.

Доработайте приложенную тестовую управляющую консольную программу (класс Application), создающую и использующую данную модель:
	•	самостоятельно создайте произвольный набор объектов иерархии, достаточный для проверки работоспособности и демонстрации реализации - generateTestModel;
	•	распечатайте количество студентов, обучающихся по бюджетной форме - printBudgetStudentsCount;
	•	распечатайте количество студентов, обучающихся по контрактной форме - printContractStudentsCount;
	•	распечатайте пары “группа фамилия” для всех студентов, родившихся 1 числа любого месяца - printStudentsBornFirstDayOfMonth;
	•	распечатайте все данные самого старшего студента из всех групп - printEldestStudent;
	•	корректно уничтожьте все созданные объекты в деструкторе.
