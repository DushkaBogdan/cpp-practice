Create a hierarchy of classes that model information about the methods of remuneration of employees:
• an abstract class representing employees (Employee):
o unique name;
o accrued bonus amount;
o a purely virtual doWork method that registers the fact that work has been completed, the duration of which in hours is passed as an argument;
o a purely virtual calculatePayment method that returns the amount of compensation for work performed + bonuses;
o a method for adding bonuses for good work;
• a derived class representing an hourly employee (HourlyEmployee):
o is characterized by an hourly wage rate;
o contains a counter of hours worked;
o implements the doWork method with a message about the completion of work on the console and the accumulation of the number of hours worked in the counter;
o implements the calculatePayment method by multiplying the total number of hours worked by the hourly wage rate + bonuses;
• a derived class representing an employee with a salary at a fixed salary rate (SalaryEmployee):
o is characterized by a fixed salary rate;
o implements the doWork method with a message about the completion of work on the console;
o implements the calculatePayment method by returning a fixed salary rate + bonuses;
• a derived class representing an unpaid trainee employee (InternEmployee):
o is characterized by a fixed download hours limit;
o implements the doWork method with a message about the completion of work on the console, if the download does not exceed the set limit;
o implements the calculatePayment method by returning the bonus amount.

Employee names in the model must be unique.

Implement a controller class that is responsible for:
• storage and destruction of all model objects;
• the createHourlyEmployee method, which adds a new hourly employee to the model;
• the createSalaryEmployee method, which adds a new employee with a fixed salary rate to the model;
• the createInternEmployee method, which adds a new trainee employee to the model;
• the trackWork method, which registers the fact that an employee has performed work with a specified duration in hours;
• the giveBonus method, which assigns a certain amount of bonuses to the specified employee;
• the getPayment method, which returns the accumulated amount of payment for the specified employee;
• the getTotalPayment method, which returns the total accumulated amount of payment for all registered employees.

The Controller must throw appropriate exceptions for the situation.
