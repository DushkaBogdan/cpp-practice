Implement and verify a class that models an electronic combination lock (ElectronicLock). The class declaration should be placed in the electroniclock.hpp file and the implementation in the electroniclock.cpp file.

You do not need to implement your own main() function, you should focus only on the class of interest.

The lock works according to the following principles:
• the lock can be in operating mode or in programming mode;
• to switch to the programming mode it is necessary to enter a special code;
• in operating mode, the lock recognizes previously registered integer keys;
• in programming mode, you can add new keys, delete existing ones, and change the programming mode code.

The class must support the following functionality:
• Constructor that accepts a specific code for programming as an int number, transferring the lock to the initial state of programming.
• Destructor.
• Copy constructor and assignment operator.
• Move constructor and move operator.
• The isInProgrammingMode() method, which determines whether the lock is in the working or programming state at the moment.
• The bool toggleProgrammingMode ( int _programmingCode ) method, which attempts to change the lock to the opposite of the current state. The method should return true if the transition was successful, false otherwise. The transition fails if an incorrect programming code is entered. If the lock was already in the programming state, the action should be reversed - transfer to the working state and return true.
• The registerCode(int) method, which adds a new unique code that the lock should accept. If the lock is not in programming mode, an exception should be thrown with the text "Not in programming mode". If such a key is already registered, the action should be ignored.
• The unregisterCode(int) method, which removes information about a previously registered key. If the lock is not in programming mode, an exception should be thrown with the text "Not in programming mode". If no such key has been registered, the action shall be ignored.
• The changeProgrammingCode( int ) method, which allows you to change the programming code to a new one. If the lock is not in programming mode, an exception should be thrown with the text "Not in programming mode". After a successful code change, the lock no longer accepts the old programming code.
• The tryUnlocking(int) method, which requests to open the lock, passing the key code as an integer as an argument. In programming mode, an exception is thrown with the text "Not in operational mode" . In run mode, the method returns true if the key is recognized, false otherwise.
• A similar tryUnlocking(const char*) method that takes a key code as a string. If the string contains something other than an integer, an exception is thrown with the text "Bad format".
• Overloaded comparison operators with another lock for equality and inequality (== and !=). Locks are considered conditionally equal when the sets of keys they accept for opening and the programming code match.

To store keys, it is recommended to use a set object from the discipline “Structures and Algorithms for Data Processing” (IntegerSet) or any other convenient means.
