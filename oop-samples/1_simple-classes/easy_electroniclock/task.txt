Реализуйте и верифицируйте класс, моделирующий электронный кодовый замок (ElectronicLock). Объявление класса следует разместить в файле electroniclock.hpp, а реализацию - в файле electroniclock.cpp.

Собственную функцию main() реализовывать не нужно, следует сосредоточиться лишь на интересующем классе.

Замок работает по следующим принципам:
	•	замок может находится в рабочем режиме либо в режиме программирования;
	•	для перехода в режим программирования необходимо ввести специальный код;
	•	в рабочем режиме замок распознает ранее зарегистрированные целочисленные ключи;
	•	в режиме программирования можно добавлять новые ключи, удалять существующие, а также менять код режима программирования.

В классе должна поддерживаться следующая функциональность:
	•	Конструктор, принимающий конкретный код для программирования в виде числа типа int, переводящий замок в начальное состояние программирования.
	•	Деструктор.
	•	Конструктор копий и оператор присвоения.
	•	Конструктор перемещения и оператор перемещения.
	•	Метод isInProgrammingMode(), определяющий находится ли замок в состоянии работы или программирования в данный момент.
	•	Метод bool toggleProgrammingMode ( int _programmingCode ), пытающийся перевести замок в противоположное текущему состояние. Метод должен возвращать значение true, если переход удался, false - если нет. Переход не удается, если вводится неправильный код программирования. Если замок и так находился в состоянии программирования, действие должно быть обратным - перевод в состояние работы и возврат true.
	•	Метод registerCode(int), добавляющий новый уникальный код, который должен принимать замок. Если замок не находится в состоянии программирования, следует сгенерировать исключение с текстом "Not in programming mode". Если такой ключ уже зарегистрирован, действие должно игнорироваться.
	•	Метод unregisterCode(int), удаляющий информацию о ранее зарегистрированном ключе. Если замок не находится в состоянии программирования, следует сгенерировать исключение с текстом "Not in programming mode". Если такой ключ не был зарегистрирован, действие должно игнорироваться.
	•	Метод changeProgrammingCode( int ), позволяющий сменить код программирования на новый. Если замок не находится в состоянии программирования, следует сгенерировать исключение с текстом "Not in programming mode". После успешной смены кода замок более не принимает старый код программирования.
	•	Метод tryUnlocking(int), запрашивающий открытие замка, передавая код ключа в виде целого числа в качестве аргумента. В режиме программирования генерируется исключение с текстом "Not in operational mode" . В рабочем режиме метод возвращает true, если ключ распознан, false в противном случае.
	•	Аналогичный метод tryUnlocking(const char*), принимающий код ключа в виде строки. Если строка содержит нечто отличное от целого числа, генерируется исключение с текстом “Bad format”.
	•	Перегруженные операторы сравнения с другим замком на равенство и неравенство (== и !=). Замки считаются условно равными, когда совпадают множества принимаемых ими ключей для открытия и код программирования.

Для хранения ключей рекомендуется использовать объект-множество из дисциплины “Структуры и алгоритмы обработки данных” (IntegerSet) либо любое другое удобное средство.
