Implement a "dec" (double-ended queue) ADT based on a sharded array - multiple fixed-length blocks,
storing data, and a service block directory containing pointers to data blocks. Handle all possible errors.

A segmented array is modeled as follows:

struct IntegerDeque
{
   // Number of cells in the directory array
   int m_directorySize;

   // Number of cells in each data block
   int m_blockSize;

   // Array-directory: pointers to data blocks
   int ** m_pDirectory;

   // Indices of the top and bottom position of the occupied cells in the directory
   int m_frontBlockIndex, m_backBlockIndex;

   // Number of used elements in the first and last blocks
   int m_frontUsed, m_backUsed;
};


The following operations must be supported:
• CLEAR ( DEQUE )
• IS_EMPTY( DEQUE ) : bool
• PUSH_FRONT( DEQUE, VALUE )
• POP_FRONT( DEQUE )
• FRONT ( DEQUE ) : VALUE
• PUSH_BACK ( DEQUE, VALUE )
• POP_BACK( DEQUE )
• BACK(DEQUE) : ​​VALUE
