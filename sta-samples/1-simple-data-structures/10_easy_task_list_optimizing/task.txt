1.	Пользователь вводит в программу через консоль последовательность положительных целых чисел, 
	завершая ввод нулем либо отрицательным числом. Затем пользователь вводит число X. Если число X больше 
	либо равно текущему первому элементу последовательности в памяти, ничего не происходит. 
	Если же число X меньше, первый элемент последовательности удаляется из памяти. Независимо от значения X, 
	программа выводит текущее состояние хранимой последовательности на каждом шаге. 
	Процесс ввода числа X и возможного изменения последовательности повторяется до тех пор, 
	пока последовательность в памяти не окажется пустой.

           Пример ввода:
       1 2 3 4 5 0 <Enter>
       5 <Enter>
       0 <Enter>
       1 <Enter>
       0 <Enter>
       1 <Enter>
       0 <Enter>

           Пример вывода:
       1 2 3 4 5
       2 3 4 5
       3 4 5
       4 5
       5

2.	Дополните реализацию односвязных списков следующими операциями:
	o	Операция подсчета суммы элементов:

     int IntegerListAccumulate ( const IntegerList & _list );

	o	Операция проверки является ли список упорядоченным по возрастанию:

     bool IntegerListIsSorted ( const IntegerList & _list );

	o	Операция разделения списка на два списка по указанному элементу 
		(все элементы левее не включая указанный попадают в первый список, разделяющий элемент и все последующие за ним - во второй список):

           void IntegerListSplice ( IntegerList & _sourceList,
                               IntegerList::Node * _pSplitNode,
                               IntegerList & _targetList1,         
                               IntegerList & _targetList2 );
